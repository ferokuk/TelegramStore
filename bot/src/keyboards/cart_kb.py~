from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup
from store.models import CartItem, Product


def build_cart_view(items: list[CartItem]) -> tuple[str, InlineKeyboardMarkup]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—É (—Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã, InlineKeyboardMarkup) —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è,
    –æ—á–∏—Å—Ç–∫–∏, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥.
    """
    kb = InlineKeyboardBuilder()
    if not items:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    else:
        total = 0
        lines = []
        # –°—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        for ci in items:
            p: Product = ci.product
            cost = p.price * ci.quantity
            total += cost
            lines.append(f"‚Ä¢ {p.description}\n  {ci.quantity} √ó {p.price}‚ÇΩ = {cost}‚ÇΩ")
            kb.button(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {p.description}",
                callback_data=f"remove_item_{ci.id}"
            )
        lines.append(f"\n<b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>")
        text = "\n".join(lines)

        # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        kb.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        kb.button(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")

    # –í—Å–µ–≥–¥–∞ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É ¬´–Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥¬ª
    kb.button(text="‚¨ÖÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="catalog")

    # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, —Å–∫–æ–ª—å–∫–æ –∞–π—Ç–µ–º–æ–≤, –ø–æ—Ç–æ–º 2 –∫–æ–ª–æ–Ω–∫–∏
    # (—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∞–π—Ç–µ–º–∞ ‚Äî –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É), –∑–∞—Ç–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    if items:
        kb.adjust(*( [1] * len(items) + [2,] ))
    else:
        kb.adjust(1)

    return text, kb.as_markup(parse_mode="HTML")
