from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton
from store.models import Category, Product
from typing import Optional

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CATEGORIES_PER_PAGE = 8
PRODUCTS_PER_PAGE = 5


def main_menu_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    kb = InlineKeyboardBuilder()
    kb.button(text='üì¶ –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog')
    kb.button(text='üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data='cart')
    kb.button(text='‚ùì FAQ', callback_data='faq')
    kb.adjust(2)
    return kb.as_markup()


def categories_kb(
        categories: list[Category],
        parent_id: Optional[int] = None,
        current_page: int = 1,
        total_pages: int = 1
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    kb = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for category in categories:
        kb.button(text=category.name, callback_data=f'category_{category.id}')

    if total_pages > 1:
        if current_page > 1:
            kb.button(text="‚¨ÖÔ∏è", callback_data=f"cat_page_{current_page - 1}_{parent_id or ''}")
        kb.button(text=f"{current_page}/{total_pages}", callback_data="no_action")
        if current_page < total_pages:
            kb.button(text="‚û°Ô∏è", callback_data=f"cat_page_{current_page + 1}_{parent_id or ''}")

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if parent_id:
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='catalog')
    else:
        kb.button(text="‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    kb.adjust(1, repeat=True)  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ

    return kb.as_markup()


def products_kb(
        products: list[Product],
        category_id: int,
        parent_category_id: int,
        current_page: int = 1,
        total_pages: int = 1
) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()

    # 1) –ö–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ
    for product in products:
        kb.button(
            text=product.description,
            callback_data=f"product_{product.id}"
        )
    kb.adjust(1, repeat=True)

    if total_pages > 1:
        page_buttons = []
        if current_page > 1:
            page_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prod_page_{category_id}_{current_page - 1}")
            )
        page_buttons.append(
            InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="no_action")
        )
        if current_page < total_pages:
            page_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"prod_page_{category_id}_{current_page + 1}")
            )
        kb.row(*page_buttons)

    kb.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"category_{parent_category_id}")
    )

    return kb.as_markup()


def product_detail_kb(product_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_item_{product_id}")
    kb.adjust(1, 2)
    return kb.as_markup()

def out_of_stock_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data=f"no_action")
    kb.adjust(1, 2)
    return kb.as_markup()
